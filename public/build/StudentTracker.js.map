{"version":3,"sources":["webpack:///StudentTracker.js","webpack:///./public/js/lost-kids.js"],"names":["webpackJsonp","module","exports","__webpack_require__","sortByNameAndStatus","a","b","an","$","attr","bn","hasClass","upperCaseFirst","string","split","map","word","toUpperCase","slice","join","createStudentDisplay","student","display","addClass","googleId","name","container","absentToggle","text","absent","toggle","append","info","img","image","on","this","toggleAbsent","bind","scanReceived","scan","scanStudent","_","find","studentsArray","data","transitionTimeout","window","clearTimeout","recentScan","onScan","call","moment","startTimes","partial","EVENT_LENGTH","TRANSITION_LENGTH","FILTER","StudentLocationDisplay","pick","el","status","updateDisplay","recent","event","end","subtract","isAfter","Date","now","time","add","prototype","e","preventDefault","self","post","id","scannedEvent","chain","key","filter","value","empty","removeClass","render","get","result","location","appendTo","scannedLocation","currentLocation","remove","replace","locationArray","sort","detach","off","correct","difference","diff","setTimeout","concat","keys","LOCATION_IMAGES","forEach","prettyDisplay","match","button","listItem","click","show","hide","students","tracker","io","connect","ajax","type","contentType","JSON","stringify"],"mappings":"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","file":"StudentTracker.js","sourcesContent":["webpackJsonp([2],[\n/* 0 */\n/*!********************************!*\\\n  !*** ./public/js/lost-kids.js ***!\n  \\********************************/\n/***/ function(module, exports, __webpack_require__) {\n\n\t// Requires\n\tvar _      = __webpack_require__(/*! lodash */ 1);\n\tvar moment = __webpack_require__(/*! moment */ 3);\n\tvar $      = __webpack_require__(/*! jquery */ 90);\n\t\n\t// Utils, bound to correct values for event and transition length\n\tvar startTimes = _.partial( __webpack_require__(/*! ../../utils/StartTimes */ 107), EVENT_LENGTH, TRANSITION_LENGTH);\n\t\n\t/* \n\t\tSorts first by status, showing students that are in the correct center first, and then sorts by first name alphabetically.\n\t\t@params: Takes in two jQuery objects for use with jQuery's sort\n\t*/\n\tfunction sortByNameAndStatus(a, b) {\n\t\tvar an = $(a).attr('data-name'), bn = $(b).attr('data-name');\n\t\n\t\treturn $(b).hasClass('Found') - $(a).hasClass('Found') || (an > bn) - 1 || 1; \n\t};\n\t\n\t/* \n\t\tPut in a slight delay for student panels to display, then set them all to same height (Not currently using this implementation, but keeping it in case we want to switch back)\n\t*/\n\tfunction resizeDisplays() {\n\t\twindow.setTimeout(function(){\n\t\t\tvar displays = $('.studentLocationDisplay');\n\t\n\t\t\tvar heights = displays.map(function() {\n\t\t\t\treturn $(this).height()\n\t\t\t});\n\t\n\t\t\tvar maxHeight = Math.max.apply(null, heights);\n\t\n\t\t\tdisplays.height(maxHeight);\n\t\t}, 500);\n\t}\n\t\n\t/*\n\t\tCreate a nice display out of a string by uppercasing each first letter\n\t*/\n\tfunction upperCaseFirst(string) {\n\t\treturn string.split(' ').map( function(word) {\n\t\t\treturn word[0].toUpperCase() + word.slice(1);\n\t\t}).join(' ');\n\t}\n\t\n\t/* \n\t\tCreates the display for a student.\n\t\tHave this as a general method instead of on the prototype because it is only called once.\n\t\n\t\t@params student: the data for a student (NOTE: this is NOT the class instance, we must bind it for the click handler to properly attach)\n\t*/\n\tfunction createStudentDisplay(student) {\n\t\t// Create the DOM element representing the student\n\t\tvar display = $('<div>')\n\t\t\t.addClass('studentLocationDisplay')\n\t\t\t.addClass('col-md-2')\n\t\t\t.attr('id', student.googleId)\n\t\t\t.attr('data-name', student.name);\n\t\n\t\tvar container = $('<div>').addClass('nameImageContainer');\n\t\n\t\tvar absentToggle = $('<button>')\n\t\t\t.addClass('btn btn-xs btn-primary absent-toggle')\n\t\t\t.text( student.absent ? 'Present' : 'Absent');\n\t\n\t\tvar toggle = $('<div>').append(absentToggle);\n\t\tvar info   = $('<div>').addClass('studentInfoContainer')\n\t\tvar name   = $('<div>').addClass('name').text( student.name );\n\t\tvar img    = $('<div>').append( $('<img>').addClass('studentImage').attr('src', student.image) );\n\t\n\t\tcontainer.append( name ).append( img );\n\t\n\t\tdisplay.append( container ).append( info ).append( toggle );\n\t\t\n\t\tabsentToggle.on('click', this.toggleAbsent.bind(this));\n\t\n\t\treturn display;\n\t}\n\t\n\t// Globals\n\tvar studentsArray = [];\n\tvar FILTER = 'All';\n\t\n\t// Class of student display\n\tvar StudentLocationDisplay = function(student) {\n\t\tthis.data = _.pick(student, ['_id', 'email','name','image','googleId', 'absent']);\n\t\n\t\tthis.el = createStudentDisplay.call(this, student);\n\t\n\t\t// If student is absent, no need to mess with any of the below data\n\t\tif (student.absent) {\n\t\t\tthis.status = 'Absent';\n\t\t\tthis.updateDisplay();\n\t\t}\n\t\t// Look at the student's recent scan to determine if they are in the correct place or not\n\t\telse if (student.recentScan) {\n\t\t\tscan = student.recentScan;\n\t\t\t\n\t\t\t// First, check if the scan is recent (i.e. if that event is still ongoing)\n\t\t\tvar recent = false;\n\t\t\tvar event = scan.event[0];\n\t\n\t\t\t// If google event, check against event end\n\t\t\tif (event && event.end && moment(event.end).subtract(TRANSITION_LENGTH, 'ms').isAfter( Date.now() ) ) {\n\t\t\t\trecent = true;\n\t\t\t}\n\t\t\t// If grove calendar, check against length of events\n\t\t\telse if (event && !event.end && moment(scan.time).add(EVENT_LENGTH- TRANSITION_LENGTH, 'ms').isAfter( Date.now() ) ) {\n\t\t\t\trecent = true;\n\t\t\t}\n\t\n\t\t\t// If the scan is recent\n\t\t\tif (recent) {\n\t\t\t\tthis.recentScan = scan;\n\t\t\t\tthis.onScan(scan);\n\t\t\t} \n\t\t\t// If the scan is not recent, student is lost\n\t\t\telse {\n\t\t\t\tthis.status = 'Lost';\n\t\t\t\tthis.updateDisplay();\n\t\t\t}\n\t\t} \n\t\t// If there is no recent scan at all, student is lost\n\t\telse {\n\t\t\tthis.status = 'Lost';\n\t\t\tthis.updateDisplay();\n\t\t}\n\t\n\t};\n\t\n\t// Toggles absent / present status\n\tStudentLocationDisplay.prototype.toggleAbsent = function(e) {\n\t\te.preventDefault();\n\t\n\t\tthis.status = this.status === 'Absent' ? 'Lost' : 'Absent';\n\t\n\t\tvar self = this;\n\t\n\t\t$.post( '/api/user/', { id: this.data.googleId, absent: !this.data.absent }, self.updateDisplay.bind(self) );\n\t}\n\t\n\t/*\n\t\tUpdates the student's display\n\t\t1. Check if they are absent or not\n\t\t2. Update their classes and explanation text\n\t\t3. If they are lost, we need to get their current event and display that as a correction, in addition to their recent scan, if any.\n\t*/ \n\tStudentLocationDisplay.prototype.updateDisplay = function() {\n\t\n\t\tif (this.status != 'Absent') {\n\t\t\tthis.el.find('.absent-toggle').text('Absent');\n\t\t}\n\t\n\t\tif (this.status === 'Found') {\n\t\t\tvar scannedEvent = this.recentScan.event[0];\n\t\t\tvar text = _.chain(['summary', 'activity', 'focus_area'])\n\t\t\t\t.map(function(key) {\n\t\t\t\t\treturn scannedEvent[key];\n\t\t\t\t})\n\t\t\t\t.filter()\n\t\t\t\t.join(' | ')\n\t\t\t\t.value()\n\t\n\t\t\tvar info = $('<p>').addClass('last-scan-info').addClass('text-primary').text(text);\n\t\n\t\t\tthis.el.find('.studentInfoContainer').empty().append(info);\n\t\t\tthis.el.removeClass('Lost').addClass('Found');\n\t\t\tthis.render();\n\t\t}\n\t\telse if (this.status === 'Lost') {\n\t\t\tvar self = this;\n\t\n\t\t\t// Call the API endpoint to get current event without a scan\n\t\t\t$.get('/current-event/' + this.data.googleId, function(result) {\n\t\n\t\t\t\tself.el.removeClass('Found').addClass('Lost');\n\t\t\t\t\n\t\t\t\tvar info = self.el.find('.studentInfoContainer');\n\t\t\t\tinfo.empty()\n\t\n\t\t\t\t// Show correct location\n\t\t\t\t$('<p>').addClass('correct-location-info text-primary')\n\t\t\t\t\t.text(result.location)\n\t\t\t\t\t.appendTo( info );\n\t\n\t\t\t\t// If there is a recent scan, show where the student is based on that scan\n\t\t\t\tif (self.recentScan) {\n\t\t\t\t\t$('<p>').addClass('last-scan-info text-danger')\n\t\t\t\t\t\t.text(self.recentScan.scannedLocation)\n\t\t\t\t\t\t.appendTo( self.el.find('.studentInfoContainer') );\n\t\t\t\t}\n\t\n\t\t\t\t// Move location based on result\n\t\t\t\tself.currentLocation = result.location;\n\t\t\t\t\n\t\t\t\tself.render()\n\t\t\t});\n\t\t} else if (this.status === 'Absent') {\n\t\t\tthis.el.removeClass('Found').addClass('Lost');\n\t\t\tthis.currentLocation = 'Absent';\n\t\t\tthis.el.find('.absent-toggle').text('Present');\n\t\t\tthis.render()\n\t\t}\n\t};\n\t\n\t/*\n\t\tRemove the student from their container and move to another, sorting the new container as needed.\n\t*/\n\tStudentLocationDisplay.prototype.render = function() {\n\t\t// Remove if already in DOM\n\t\tif (this.el) {\n\t\t\tthis.el.remove();\n\t\t};\n\t\n\t\t// Render into the dom based on where their location is\n\t\tvar location = $('#' + this.currentLocation.replace(/ /g, '') )\n\t\tlocation.append(this.el);\n\t\n\t\t/*\n\t\t\tIf we want to put students into a lost container as well as their own, this would be the start... but many issues to deal with, including:\n\t\t\t1. The absent button event handler, properly binding to the student\n\t\t\t2. Removing the clone as well as the el above\n\t\t\t3. Making sure multiple copies don't show up\n\t\t\t\n\t\t\tif (this.status = 'Lost') {\n\t\t\t\t$('#Lost').append( this.el.clone(true) );\n\t\t\t}\n\t\t*/\n\t\n\t\tvar locationArray = location.find('.studentLocationDisplay').sort( sortByNameAndStatus );\n\t\n\t\tlocationArray.detach().appendTo( location );\n\t\n\t\t// Re-attach the absent click handler\n\t\tthis.el.find('.absent-toggle')\n\t\t\t.off('click')\n\t\t\t.on('click', this.toggleAbsent.bind(this) );\n\t};\n\t\n\t/*\n\t\tonScan will either be called based on a scan being received or if a student is automatically checked out based on the event being over.\n\t\t1. Update their current location if there was a scan.\n\t\t2. Update their status based on whether the scan was correct or not.\n\t\t3. If there was a correct scan, set up a new timer.\n\t\t4. Call updateDisplay\n\t*/\n\tStudentLocationDisplay.prototype.onScan = function(scan) {\n\t\n\t\tvar self = this;\n\t\n\t\tif (scan && scan.correct) {\n\t\t\tthis.currentLocation = scan.scannedLocation;\n\t\t\tthis.status = 'Found';\n\t\n\t\t\t// Get time until the event is over, either based on the event's end for google calendar events or the startTimes util for grove calendar events\n\t\t\tvar difference = scan.event[0].end ? moment(scan.event[0].end).subtract( TRANSITION_LENGTH, 'ms').diff( Date.now() ) : startTimes() + EVENT_LENGTH - TRANSITION_LENGTH;\n\t\t\t\n\t\t\tthis.transitionTimeout = window.setTimeout( self.onScan.bind(self, null), difference);\n\t\t}\n\t\t// If the scan does not match the location, the student is lost\n\t\telse if (scan) {\n\t\t\tthis.status = 'Lost';\n\t\t}\n\t\t// If there is no scan, the student is lost, and remove their recent scan\n\t\telse {\n\t\t\tthis.status = 'Lost';\n\t\t\tthis.recentScan = null;\n\t\t}\n\t\n\t\t// Now updateDisplay\n\t\tself.updateDisplay();\n\t};\n\t\n\t// When receiving a scan, find the student that matches the scan, move them to a new location based on the scan and clear any possible transitions\n\tfunction scanReceived(scan) {\n\t\n\t\tvar scanStudent = _.find(studentsArray, function(student) {\n\t\t\treturn student.data.googleId === scan.googleId;\n\t\t});\n\t\n\t\t// If a student is found, move the student and override their recent scan\n\t\tif (scanStudent) {\n\t\t\tif (scanStudent.transitionTimeout) { window.clearTimeout(scanStudent.transitionTimeout); }\n\t\t\tscanStudent.recentScan = scan;\n\t\t\t// Call the onScan function, making sure it is bound to the current student\n\t\t\tscanStudent.onScan.call(scanStudent, scan);\n\t\t}\n\t}\n\t\n\t/*\n\t\tOn page load:\n\t\t1. Create filter buttons and container divs for all the different possible locations, and an extra one for 'Absent'.\n\t\t2. Load all students using an AJAX call, make StudentLocationDisplay instances for each. Initiating the instance will also move the student to their initial location.\n\t*/\n\t$(function(){\n\t\t['Lost'].concat(_.keys(LOCATION_IMAGES ), 'Absent').forEach( function(location) {\n\t\t\t\n\t\t\t// Display, with special protection for iPad Center\n\t\t\tvar prettyDisplay = location.match(/ipad/i) ? 'iPad Center' : upperCaseFirst(location);\n\t\n\t\t\t// Create the filter button and add it to button group\n\t\t\tvar button = $('<button>').addClass('btn btn-info btn-block').text(prettyDisplay);\n\t\t\tvar listItem = $('<li>').append(button);\n\t\t\t$('#location-filters').append(listItem);\n\t\n\t\t\t// Create the container\n\t\t\t$('<div>')\n\t\t\t\t.addClass('row')\n\t\t\t\t.attr( 'id', prettyDisplay.replace(/ /g, '') )\n\t\t\t\t.append( $('<h3>').text(prettyDisplay) )\n\t\t\t\t.appendTo( $('#locations-container') );\n\t\t});\n\t\n\t\t// Attach event handler to the filter buttons\n\t\t$('#location-filters button').click(function(e) {\n\t\t\t\n\t\t\t// Set filter\n\t\t\tFILTER = $(this).text();\n\t\n\t\t\t// Update display, either showing all or hiding all except the one clicked\n\t\t\tif (FILTER === 'All') {\n\t\t\t\t$('#locations-container > div').show();\n\t\t\t}\n\t\t\telse {\n\t\t\t\t$('#locations-container > div').hide();\n\t\t\t\t$('#' + FILTER.replace(/ /g, '') ).show();\n\t\t\t}\n\t\n\t\t\t// Update the display of the filter buttons by removing primary from all and adding it to this one\n\t\t\t$('#location-filters button.btn-warning')\n\t\t\t\t.removeClass('btn-warning')\n\t\t\t\t.addClass('btn-info');\n\t\t\t$(this)\n\t\t\t\t.removeClass('btn-info')\n\t\t\t\t.addClass('btn-warning');\n\t\t});\n\t\t\n\t\t// Once all the containers are set, make AJAX call to get all the students and create StudentLocationDisplay objects\n\t\t$.get('api/user', function(students) {\n\t\t\tstudentsArray = _.map(students, function(student) {\n\t\t\t\treturn new StudentLocationDisplay(student);\n\t\t\t});\n\t\t});\n\t\n\t\t// Listen for scans\n\t\tvar tracker = io.connect();\n\t\ttracker.on('SCAN!', scanReceived );\n\t\n\t\t// All absent event handler\n\t\t$('.all-absent').on('click', function() {\n\t\t\t$.ajax('/api/user/bulk', { \n\t\t\t\ttype: 'PUT',\n\t\t\t\tcontentType: 'application/json',\n\t\t\t\tdata: JSON.stringify({ absent: true })\n\t\t\t});\n\t\t});\n\t\t\n\t});\n\n\n/***/ }\n]);\n\n\n/** WEBPACK FOOTER **\n ** StudentTracker.js\n **/","// Requires\nvar _      = require('lodash');\nvar moment = require('moment');\nvar $      = require('jquery');\n\n// Utils, bound to correct values for event and transition length\nvar startTimes = _.partial( require('../../utils/StartTimes'), EVENT_LENGTH, TRANSITION_LENGTH);\n\n/* \n\tSorts first by status, showing students that are in the correct center first, and then sorts by first name alphabetically.\n\t@params: Takes in two jQuery objects for use with jQuery's sort\n*/\nfunction sortByNameAndStatus(a, b) {\n\tvar an = $(a).attr('data-name'), bn = $(b).attr('data-name');\n\n\treturn $(b).hasClass('Found') - $(a).hasClass('Found') || (an > bn) - 1 || 1; \n};\n\n/* \n\tPut in a slight delay for student panels to display, then set them all to same height (Not currently using this implementation, but keeping it in case we want to switch back)\n*/\nfunction resizeDisplays() {\n\twindow.setTimeout(function(){\n\t\tvar displays = $('.studentLocationDisplay');\n\n\t\tvar heights = displays.map(function() {\n\t\t\treturn $(this).height()\n\t\t});\n\n\t\tvar maxHeight = Math.max.apply(null, heights);\n\n\t\tdisplays.height(maxHeight);\n\t}, 500);\n}\n\n/*\n\tCreate a nice display out of a string by uppercasing each first letter\n*/\nfunction upperCaseFirst(string) {\n\treturn string.split(' ').map( function(word) {\n\t\treturn word[0].toUpperCase() + word.slice(1);\n\t}).join(' ');\n}\n\n/* \n\tCreates the display for a student.\n\tHave this as a general method instead of on the prototype because it is only called once.\n\n\t@params student: the data for a student (NOTE: this is NOT the class instance, we must bind it for the click handler to properly attach)\n*/\nfunction createStudentDisplay(student) {\n\t// Create the DOM element representing the student\n\tvar display = $('<div>')\n\t\t.addClass('studentLocationDisplay')\n\t\t.addClass('col-md-2')\n\t\t.attr('id', student.googleId)\n\t\t.attr('data-name', student.name);\n\n\tvar container = $('<div>').addClass('nameImageContainer');\n\n\tvar absentToggle = $('<button>')\n\t\t.addClass('btn btn-xs btn-primary absent-toggle')\n\t\t.text( student.absent ? 'Present' : 'Absent');\n\n\tvar toggle = $('<div>').append(absentToggle);\n\tvar info   = $('<div>').addClass('studentInfoContainer')\n\tvar name   = $('<div>').addClass('name').text( student.name );\n\tvar img    = $('<div>').append( $('<img>').addClass('studentImage').attr('src', student.image) );\n\n\tcontainer.append( name ).append( img );\n\n\tdisplay.append( container ).append( info ).append( toggle );\n\t\n\tabsentToggle.on('click', this.toggleAbsent.bind(this));\n\n\treturn display;\n}\n\n// Globals\nvar studentsArray = [];\nvar FILTER = 'All';\n\n// Class of student display\nvar StudentLocationDisplay = function(student) {\n\tthis.data = _.pick(student, ['_id', 'email','name','image','googleId', 'absent']);\n\n\tthis.el = createStudentDisplay.call(this, student);\n\n\t// If student is absent, no need to mess with any of the below data\n\tif (student.absent) {\n\t\tthis.status = 'Absent';\n\t\tthis.updateDisplay();\n\t}\n\t// Look at the student's recent scan to determine if they are in the correct place or not\n\telse if (student.recentScan) {\n\t\tscan = student.recentScan;\n\t\t\n\t\t// First, check if the scan is recent (i.e. if that event is still ongoing)\n\t\tvar recent = false;\n\t\tvar event = scan.event[0];\n\n\t\t// If google event, check against event end\n\t\tif (event && event.end && moment(event.end).subtract(TRANSITION_LENGTH, 'ms').isAfter( Date.now() ) ) {\n\t\t\trecent = true;\n\t\t}\n\t\t// If grove calendar, check against length of events\n\t\telse if (event && !event.end && moment(scan.time).add(EVENT_LENGTH- TRANSITION_LENGTH, 'ms').isAfter( Date.now() ) ) {\n\t\t\trecent = true;\n\t\t}\n\n\t\t// If the scan is recent\n\t\tif (recent) {\n\t\t\tthis.recentScan = scan;\n\t\t\tthis.onScan(scan);\n\t\t} \n\t\t// If the scan is not recent, student is lost\n\t\telse {\n\t\t\tthis.status = 'Lost';\n\t\t\tthis.updateDisplay();\n\t\t}\n\t} \n\t// If there is no recent scan at all, student is lost\n\telse {\n\t\tthis.status = 'Lost';\n\t\tthis.updateDisplay();\n\t}\n\n};\n\n// Toggles absent / present status\nStudentLocationDisplay.prototype.toggleAbsent = function(e) {\n\te.preventDefault();\n\n\tthis.status = this.status === 'Absent' ? 'Lost' : 'Absent';\n\n\tvar self = this;\n\n\t$.post( '/api/user/', { id: this.data.googleId, absent: !this.data.absent }, self.updateDisplay.bind(self) );\n}\n\n/*\n\tUpdates the student's display\n\t1. Check if they are absent or not\n\t2. Update their classes and explanation text\n\t3. If they are lost, we need to get their current event and display that as a correction, in addition to their recent scan, if any.\n*/ \nStudentLocationDisplay.prototype.updateDisplay = function() {\n\n\tif (this.status != 'Absent') {\n\t\tthis.el.find('.absent-toggle').text('Absent');\n\t}\n\n\tif (this.status === 'Found') {\n\t\tvar scannedEvent = this.recentScan.event[0];\n\t\tvar text = _.chain(['summary', 'activity', 'focus_area'])\n\t\t\t.map(function(key) {\n\t\t\t\treturn scannedEvent[key];\n\t\t\t})\n\t\t\t.filter()\n\t\t\t.join(' | ')\n\t\t\t.value()\n\n\t\tvar info = $('<p>').addClass('last-scan-info').addClass('text-primary').text(text);\n\n\t\tthis.el.find('.studentInfoContainer').empty().append(info);\n\t\tthis.el.removeClass('Lost').addClass('Found');\n\t\tthis.render();\n\t}\n\telse if (this.status === 'Lost') {\n\t\tvar self = this;\n\n\t\t// Call the API endpoint to get current event without a scan\n\t\t$.get('/current-event/' + this.data.googleId, function(result) {\n\n\t\t\tself.el.removeClass('Found').addClass('Lost');\n\t\t\t\n\t\t\tvar info = self.el.find('.studentInfoContainer');\n\t\t\tinfo.empty()\n\n\t\t\t// Show correct location\n\t\t\t$('<p>').addClass('correct-location-info text-primary')\n\t\t\t\t.text(result.location)\n\t\t\t\t.appendTo( info );\n\n\t\t\t// If there is a recent scan, show where the student is based on that scan\n\t\t\tif (self.recentScan) {\n\t\t\t\t$('<p>').addClass('last-scan-info text-danger')\n\t\t\t\t\t.text(self.recentScan.scannedLocation)\n\t\t\t\t\t.appendTo( self.el.find('.studentInfoContainer') );\n\t\t\t}\n\n\t\t\t// Move location based on result\n\t\t\tself.currentLocation = result.location;\n\t\t\t\n\t\t\tself.render()\n\t\t});\n\t} else if (this.status === 'Absent') {\n\t\tthis.el.removeClass('Found').addClass('Lost');\n\t\tthis.currentLocation = 'Absent';\n\t\tthis.el.find('.absent-toggle').text('Present');\n\t\tthis.render()\n\t}\n};\n\n/*\n\tRemove the student from their container and move to another, sorting the new container as needed.\n*/\nStudentLocationDisplay.prototype.render = function() {\n\t// Remove if already in DOM\n\tif (this.el) {\n\t\tthis.el.remove();\n\t};\n\n\t// Render into the dom based on where their location is\n\tvar location = $('#' + this.currentLocation.replace(/ /g, '') )\n\tlocation.append(this.el);\n\n\t/*\n\t\tIf we want to put students into a lost container as well as their own, this would be the start... but many issues to deal with, including:\n\t\t1. The absent button event handler, properly binding to the student\n\t\t2. Removing the clone as well as the el above\n\t\t3. Making sure multiple copies don't show up\n\t\t\n\t\tif (this.status = 'Lost') {\n\t\t\t$('#Lost').append( this.el.clone(true) );\n\t\t}\n\t*/\n\n\tvar locationArray = location.find('.studentLocationDisplay').sort( sortByNameAndStatus );\n\n\tlocationArray.detach().appendTo( location );\n\n\t// Re-attach the absent click handler\n\tthis.el.find('.absent-toggle')\n\t\t.off('click')\n\t\t.on('click', this.toggleAbsent.bind(this) );\n};\n\n/*\n\tonScan will either be called based on a scan being received or if a student is automatically checked out based on the event being over.\n\t1. Update their current location if there was a scan.\n\t2. Update their status based on whether the scan was correct or not.\n\t3. If there was a correct scan, set up a new timer.\n\t4. Call updateDisplay\n*/\nStudentLocationDisplay.prototype.onScan = function(scan) {\n\n\tvar self = this;\n\n\tif (scan && scan.correct) {\n\t\tthis.currentLocation = scan.scannedLocation;\n\t\tthis.status = 'Found';\n\n\t\t// Get time until the event is over, either based on the event's end for google calendar events or the startTimes util for grove calendar events\n\t\tvar difference = scan.event[0].end ? moment(scan.event[0].end).subtract( TRANSITION_LENGTH, 'ms').diff( Date.now() ) : startTimes() + EVENT_LENGTH - TRANSITION_LENGTH;\n\t\t\n\t\tthis.transitionTimeout = window.setTimeout( self.onScan.bind(self, null), difference);\n\t}\n\t// If the scan does not match the location, the student is lost\n\telse if (scan) {\n\t\tthis.status = 'Lost';\n\t}\n\t// If there is no scan, the student is lost, and remove their recent scan\n\telse {\n\t\tthis.status = 'Lost';\n\t\tthis.recentScan = null;\n\t}\n\n\t// Now updateDisplay\n\tself.updateDisplay();\n};\n\n// When receiving a scan, find the student that matches the scan, move them to a new location based on the scan and clear any possible transitions\nfunction scanReceived(scan) {\n\n\tvar scanStudent = _.find(studentsArray, function(student) {\n\t\treturn student.data.googleId === scan.googleId;\n\t});\n\n\t// If a student is found, move the student and override their recent scan\n\tif (scanStudent) {\n\t\tif (scanStudent.transitionTimeout) { window.clearTimeout(scanStudent.transitionTimeout); }\n\t\tscanStudent.recentScan = scan;\n\t\t// Call the onScan function, making sure it is bound to the current student\n\t\tscanStudent.onScan.call(scanStudent, scan);\n\t}\n}\n\n/*\n\tOn page load:\n\t1. Create filter buttons and container divs for all the different possible locations, and an extra one for 'Absent'.\n\t2. Load all students using an AJAX call, make StudentLocationDisplay instances for each. Initiating the instance will also move the student to their initial location.\n*/\n$(function(){\n\t['Lost'].concat(_.keys(LOCATION_IMAGES ), 'Absent').forEach( function(location) {\n\t\t\n\t\t// Display, with special protection for iPad Center\n\t\tvar prettyDisplay = location.match(/ipad/i) ? 'iPad Center' : upperCaseFirst(location);\n\n\t\t// Create the filter button and add it to button group\n\t\tvar button = $('<button>').addClass('btn btn-info btn-block').text(prettyDisplay);\n\t\tvar listItem = $('<li>').append(button);\n\t\t$('#location-filters').append(listItem);\n\n\t\t// Create the container\n\t\t$('<div>')\n\t\t\t.addClass('row')\n\t\t\t.attr( 'id', prettyDisplay.replace(/ /g, '') )\n\t\t\t.append( $('<h3>').text(prettyDisplay) )\n\t\t\t.appendTo( $('#locations-container') );\n\t});\n\n\t// Attach event handler to the filter buttons\n\t$('#location-filters button').click(function(e) {\n\t\t\n\t\t// Set filter\n\t\tFILTER = $(this).text();\n\n\t\t// Update display, either showing all or hiding all except the one clicked\n\t\tif (FILTER === 'All') {\n\t\t\t$('#locations-container > div').show();\n\t\t}\n\t\telse {\n\t\t\t$('#locations-container > div').hide();\n\t\t\t$('#' + FILTER.replace(/ /g, '') ).show();\n\t\t}\n\n\t\t// Update the display of the filter buttons by removing primary from all and adding it to this one\n\t\t$('#location-filters button.btn-warning')\n\t\t\t.removeClass('btn-warning')\n\t\t\t.addClass('btn-info');\n\t\t$(this)\n\t\t\t.removeClass('btn-info')\n\t\t\t.addClass('btn-warning');\n\t});\n\t\n\t// Once all the containers are set, make AJAX call to get all the students and create StudentLocationDisplay objects\n\t$.get('api/user', function(students) {\n\t\tstudentsArray = _.map(students, function(student) {\n\t\t\treturn new StudentLocationDisplay(student);\n\t\t});\n\t});\n\n\t// Listen for scans\n\tvar tracker = io.connect();\n\ttracker.on('SCAN!', scanReceived );\n\n\t// All absent event handler\n\t$('.all-absent').on('click', function() {\n\t\t$.ajax('/api/user/bulk', { \n\t\t\ttype: 'PUT',\n\t\t\tcontentType: 'application/json',\n\t\t\tdata: JSON.stringify({ absent: true })\n\t\t});\n\t});\n\t\n});\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./public/js/lost-kids.js\n ** module id = 0\n ** module chunks = 2\n **/"],"sourceRoot":""}